<?php

/**
 * Magictoolbox product media template for Magento store.
 * Allow use MagicTools on product detailes page.
 * @mail support@magictoolbox.com
 */

$magicToolboxHelper = Mage::helper('magiczoom/settings');
$tool = $magicToolboxHelper->loadTool('product');

$magic360ClassName = Mage::registry('magic360ClassName');
if($magic360ClassName) {
    $tool->params->set('use-effect-on-product-page', 'No');
    //require(dirname(__FILE__).'/../'.$magic360ClassName.'/media.phtml');
    require(Mage::getSingleton('core/design_package')->getTemplateFilename($magic360ClassName.'/media.phtml'));
    //Mage::unregister('magic360ClassName');
    return;
}

$enableEffect = !$tool->params->checkValue('use-effect-on-product-page', 'No');
if(!$enableEffect) {
    require($magicToolboxHelper->getProductViewMediaTemplateFilename());
    return;
}

$_product = $this->getProduct();
$id = $_product->getId();
$_product_title = $title = $this->htmlEscape($_product->getName());
// If there's no image set up
if ($_product->getImage() == 'no_selection')
{
	$_gallery = Mage::getModel('catalog/product')->load($_product->getId())->getMediaGalleryImages();
	if (!empty($_gallery))
	{
		foreach($_gallery as $_galleryImage)
		{
			if ($_galleryImage['file'] != "")
			{
				$main_image_file = $_galleryImage['file'];
				break;
			}
		}
	}
}
else $main_image_file = $_product->getImage();
$main = '';

if($main_image_file && $main_image_file != 'no_selection') {

    $output_helper = $this->helper('catalog/output');
    $description = $this->htmlEscape($output_helper->productAttribute($_product, $_product->getDescription(), 'description'));
    $shortDescription = $this->htmlEscape($output_helper->productAttribute($_product, nl2br($_product->getShortDescription()), 'short_description'));

    $img = $this->helper('catalog/image')->init($_product, 'image',$main_image_file)->__toString();
    list($w, $h) = $magicToolboxHelper->magicToolboxGetSizes('thumb', $this->helper('catalog/image')->getOriginalSizeArray());
    $thumb = $this->helper('catalog/image')->init($_product, 'small_image', $main_image_file)->resize($w, $h)->__toString();

    $height = $h;
    $width = $w;
    $main = $tool->template(compact("id", "title", "description", "shortDescription", "img", "thumb", "height", "width"));

} else {
    $tool->params->set('use-effect-on-product-page', 'No');
    require($magicToolboxHelper->getProductViewMediaTemplateFilename());
    return;
}

$images = array();
$hidden_images = array();

if(!$this->_isGalleryDisabled) {
    if(count($this->getGalleryImages()->getItems()) > ($tool->type == 'standard' ? 1 : 0)) {
        foreach($this->getGalleryImages() as $_image) {
        	if (substr($this->htmlEscape($_image->getLabel()),0,6)!="swatch") {
	            $_image_file = $_image->getFile();
	            $_image_path  = $_image->getPath();
	            $arr = array(200, 280);
                try {
                    $arr = getimagesize($_image_path);
                }
                catch(Exception $ex) {
                }
                list($w, $h) = $magicToolboxHelper->magicToolboxGetSizes('thumb', $arr);
	            $medium = $this->helper('catalog/image')->init($_product, 'small_image', $_image_file)->resize($w, $h)->__toString();
	            list($w, $h) = $magicToolboxHelper->magicToolboxGetSizes('selector', $arr);
	            $thumb = $this->helper('catalog/image')->init($_product, 'thumbnail', $_image_file)->resize($w, $h)->__toString();
	            $img = $this->helper('catalog/image')->init($_product, 'image', $_image_file)->__toString();
	
	            $alt = $this->htmlEscape($_image->getLabel());
	            if($tool->params->checkValue('use-individual-titles', 'Yes')) {
	                $title = empty($alt) ? $_product_title : $alt;
	            }
	
	            list($width, $height) = $magicToolboxHelper->magicToolboxGetSizes('selector', $arr);
				$a = $tool->subTemplate(compact("id", "img", "thumb", "medium", "title", "alt", "height", "width"));
	            $event = 'click';
	            $event = strtolower($tool->params->getValue('selectors-change'));
	            $a = str_replace('<a ', '<a on' . $event . '="MagicToolboxChangeSelector(this);" ', $a);
	            if($main_image_file == $_image_file) {
	                $a = str_replace('<img ', '<img id="imageMain'.$id.'" ', $a);
	            }
	            if($tool->params->checkValue('ignore-magento-css', 'Yes')) {
	                $a = str_replace('<a ', '<a class="ignore-magento-css" ', $a);
	                $a = str_replace('<img ', '<img class="ignore-magento-css" ', $a);
	            }
	            $images[] = $a;
	        }
        }

    }

    if($_product->getTypeId() == 'configurable') {
        if($tool->params->checkValue('show-associated-product-images', 'Yes')) {
?>
<script type="text/javascript">
    var useAssociatedProductImages = true;
</script>
<?php
            $selectorsVisibility = $tool->params->checkValue('load-associated-product-images', 'within a gallery');
            $scrollEnabled = $tool->params->checkValue('magicscroll', 'Yes');
            $associatedProducts = $_product->loadByAttribute('sku', $_product->getSku())->getTypeInstance()->getUsedProducts();
            foreach($associatedProducts as $associatedProduct) {
                $associatedProductId = $associatedProduct->getId();
                //NOTE: to get gallery
                //$_associatedProduct = Mage::getModel('catalog/product')->load($associatedProductId);
                if($associatedProduct->image && $associatedProduct->image != 'no_selection') {
                    $associatedImg = $this->helper('catalog/image')->init($associatedProduct, 'image', $associatedProduct->getImage())->__toString();
                    list($w, $h) = $magicToolboxHelper->magicToolboxGetSizes('thumb', $this->helper('catalog/image')->getOriginalSizeArray());
                    $associatedThumb = $this->helper('catalog/image')->init($associatedProduct, 'small_image', $associatedProduct->getImage())->resize($w, $h)->__toString();
                    list($w, $h) = $magicToolboxHelper->magicToolboxGetSizes('selector', $this->helper('catalog/image')->getOriginalSizeArray());
                    $associatedSelector = $this->helper('catalog/image')->init($associatedProduct, 'thumbnail', $associatedProduct->getImage())->resize($w, $h)->__toString();

                    $alt = $this->htmlEscape($associatedProduct->getImageLabel());
                    if($tool->params->checkValue('use-individual-titles', 'Yes')) {
                        $title = empty($alt) ? $_product_title : $alt;
                    }

                    $selector = $tool->subTemplate(array(
                        'id' => $id,
                        'img' => $associatedImg,
                        'thumb' => $associatedSelector,
                        'medium' => $associatedThumb,
                        'title' => $title,
                        'alt' => $alt
                    ));
                    if(!$selectorsVisibility) {
                        $selector = str_replace('<a ', '<a class="hidden-selector" ', $selector);
                        if($scrollEnabled) {
                            $hidden_images[] = str_replace('<img ', '<img id="imageConfigurable'.$associatedProductId.'" ', $selector);
                        } else {
                            $images[] = str_replace('<img ', '<img id="imageConfigurable'.$associatedProductId.'" ', $selector);
                        }
                    } else {
                        if($scrollEnabled) {
                            $hidden_images[] = str_replace('<img ', '<img id="imageConfigurable'.$associatedProductId.'" ', $selector);
                            $images[] = $selector;
                        } else {
                            $images[] = str_replace('<img ', '<img id="imageConfigurable'.$associatedProductId.'" ', $selector);
                        }
                    }
                }
            }
        }
    }

}

if(!$tool->params->exists('template')) {
    $tool->params->set('template', 'original');
}

//DEPRECATED:
//because of issue when not standard type tool's (scroll) params replace standard type tool's params (magiczoomplus)
//'template' option not present there
//MagicToolboxTemplateHelperClass::setOptions($tool->params);

if(!empty($hidden_images)) {
    echo '<div style="display: none !important;">'.implode($hidden_images).'</div>';
}
echo MagicToolboxTemplateHelperClass::render(array(
    'main' => $main,
    'thumbs' => $images,
    'pid' => $id,
    'moviews' => $this->__('More Views')
));
?>
