<?php

/**
 * Magictoolbox product list template for Magento store.
 * Allow use MagicTools on product list page.
 * @mail support@magictoolbox.com
 */
 
$placeHolder = $this->getSkinUrl('images/catalog/product/placeholder/image.jpg');

// Detect iPhone and iPad
function isAppleMobile($user_agent=NULL) {
    if(!isset($user_agent)) {
        $user_agent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';
    }
    return (strpos($user_agent, 'iPhone') !== FALSE || strpos($user_agent, 'iPad') !== FALSE);
}

/**
 * Magictoolbox product list template for Magento store.
 * Allow use MagicTools on product list page.
 * @mail support@magictoolbox.com
 */

$output_helper = $this->helper('catalog/output');
$mzWidth = $tool->params->getValue('thumb-max-width');
$mzHeight = $tool->params->getValue('thumb-max-height');

foreach($_productCollection as $__product) {

    $pid = $__product->getId();
    $id = $group.'_'.$pid;
    $_product = Mage::getModel('catalog/product')->load($pid);
    $_image_file = $_product->getImage();

    if($_image_file && $_image_file != 'no_selection') {
        $title = $this->htmlEscape($_product->getName());
        //$description = $this->htmlEscape($_product->getDescription());
        $description = $this->htmlEscape($output_helper->productAttribute($_product, $_product->getDescription(), 'description'));
        //$shortDescription = $this->htmlEscape($_product->getShortDescription());
        $shortDescription = $this->htmlEscape($output_helper->productAttribute($_product, nl2br($_product->getShortDescription()), 'short_description'));

        $_small_image_file = $_product->getSmall_image();
        // $img = $this->helper('catalog/image')->init($_product, 'small_image', $_small_image_file)->__toString();
        $originalSizeArray = $this->helper('catalog/image')->getOriginalSizeArray();
        // if($tool->params->checkValue('square-images', 'Yes')) {
            // $big_image_size = ($originalSizeArray[0] > $originalSizeArray[1]) ? $originalSizeArray[0] : $originalSizeArray[1];
            // $img = $this->helper('catalog/image')->watermark(null, null)->resize($big_image_size)->__toString();
        // }
        list($w, $h) = $magicToolboxHelper->magicToolboxGetSizes('thumb', $originalSizeArray);
        $thumb = $this->helper('catalog/image')->init($_product, 'small_image', $_small_image_file)->resize($mzWidth, $mzHeight)->__toString();
		$img = $thumb;
		
		// Add height and width
        $width = $w;
        $height = $h;

        if($tool->params->checkValue('link-to-product-page', 'Yes')) {
            //NOTE: get URL from $__product (not $_product) object
            // Get the URL from the description if it's an advert panel
            if($_product->getTypeId() == "panel")
            {
                if (Mage::helper('advertpanels')->isValidUrl($description))
                {
                    $link = $description;
                }
                else
                {
                    $link = 'javascript:void(0);';
                }
            }
            else
            {
                $link = $__product->getProductUrl();
            }
        } else {
            $link = '';
        }
            if($tool->params->checkValue('drag-mode', 'Yes')) { //onclick only if drag mode is disabled
                $link = '';
            }

        $html = $tool->getMainTemplate(compact('id', 'group', 'title', 'description', 'shortDescription', 'img', 'thumb', 'link', 'width', 'height'));

        if($tool->params->checkValue('show-selectors-on-category-page', 'Yes')) {
            $gallery = $_product->getMediaGalleryImages();
			// We get the image labels
			$imagesLabels = $gallery->getColumnValues('label');
			// Exception if it's an Apple devices we have to change the anchor tag link using an onclick even
			// $html = str_replace('<a','<a onclick="javascript:window.location=\''.$link.'\';return false;"',$html);
			if (isAppleMobile()) 
			{
				// $prodHtml = str_replace('<a','<a ontouchend="javascript:window.location=\''.$prodUrl.'\';return false;"',$prodHtml);
			} 
			else 
			{
				$bodyShotsLabels = preg_grep('/^inside 2/',$imagesLabels);
				if (!empty($bodyShotsLabels))
				{
					// We get the corresponding image (first element of the array of body shots retrieved using reset)
					$bodyShotImage = $gallery->getItemByColumnValue('label',reset($bodyShotsLabels));
					$bodyShot = $this->helper('catalog/image')->init($_product, 'small_image', $bodyShotImage->getFile())->resize($mzWidth, $mzHeight)->__toString();
					$html = str_replace('<img','<img onmouseover="this.src=\''.$bodyShot.'\'" onmouseout="this.src=\''.$img.'\'"',$html);
				}
            }
            $html .= '<div class="MagicToolboxSelectorsContainer">';
			$htmlSwatch = "";
            $swatchCnt = 0;
			
            foreach($gallery  as $_image) {
                if (substr($this->htmlEscape($_image->getLabel()),0,6)=="swatch") {
                    $swatchCnt++;
					$_image_file = $_image->getFile();
					$_image_path  = $_image->getPath();
					if (!file_exists($_image_path)) 
					{
						$_image_path = $placeHolder;
					}
					$originalSizeArray = getimagesize($_image_path);	
					list($w, $h) = $magicToolboxHelper->magicToolboxGetSizes('selector', $originalSizeArray);
					$width = $w;
                    $height = $h;
					$thumb = $this->helper('catalog/image')->init($_product, 'thumbnail', $_image_file)->resize($w, $h)->__toString();
					$pictureToFind = str_replace("swatch","front",$this->htmlEscape($_image->getLabel()));
                    $medium = $img;
					// We loop through the images labels
					foreach ($imagesLabels as $imageLabel)
					{
						// If we find the picture
						if ($this->htmlEscape($imageLabel)==$pictureToFind) 
						{
							// We get the corresponding image
							$pictureToFindImage = $gallery->getItemByColumnValue('label',$imageLabel);
							//$img = $this->helper('catalog/image')->init($_product, 'thumbnail', $pictureToFindImage->getFile())->__toString();							
							$_image_path = $pictureToFindImage->getPath();
							if (!file_exists($_image_path)) 
							{
								$_image_path = $placeHolder;
							}
							$originalSizeArray = getimagesize($_image_path);						
							list($w, $h) = $magicToolboxHelper->magicToolboxGetSizes('thumb', $originalSizeArray);
							$medium = $this->helper('catalog/image')->init($_product, 'small_image', $pictureToFindImage->getFile())->resize($mzWidth, $mzHeight)->__toString();
							$img = $medium;
							break;
						}
						else continue;
					}
					// $title = $this->htmlEscape($_image->getLabel());
					$a = $tool->getSelectorTemplate(compact('id', 'img', 'thumb', 'medium', 'title', 'width', 'height'));
					$htmlSwatch .= $a;
				}
				else
				{
					continue;
				}
            }
			if ($swatchCnt > 1) 
			{
                $html .= $htmlSwatch;
			}
            $html .= '</div>';
        }

        $html = '<div class="MagicToolboxContainer">' . $html . '</div>';
        //NOTE: get URL from $__product (not $_product) object
        $pattern = '<a[^>]+href=\"' . preg_quote($__product->getProductUrl(), '/') . '\"[^>]*>\s*<img[^>]+\/>\s*<\/a>';
        $contents_new = preg_replace('/' . $pattern . '/is', $html, $contents);
        if($contents_new == $contents) {
            $pattern = '<a[^>]+>\s*<img[^>]+?src="[^"]*?'.preg_quote($_small_image_file, '/').'"[^>]*>\s*<\/a>';
            $contents_new = preg_replace('/'.$pattern.'/is', $html, $contents);
        }
        $contents = $contents_new;
    }

}

?>
<script type="text/javascript">
    jQuery(function() {
        jQuery(".category-products .MagicToolboxSelectorsContainer a").click(function () {
            // Unselect the previous swatch (CSS)
            if (jQuery('.swatch-selected'))
            {
                jQuery('.swatch-selected').removeClass('swatch-selected');
            }
            // Apply CSS selection on the swatch
            jQuery(this).addClass('swatch-selected');
        });
    });
</script>
