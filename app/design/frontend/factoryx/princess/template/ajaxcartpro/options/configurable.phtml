<?php
/**
 * Magictoolbox configurable options template for Magento store.
 * Allow use MagicTools with product attributes
 * @mail support@magictoolbox.com
 */
$_product    = $this->getProduct();
$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());

/*$_mzHelper = Mage::helper('magiczoom/settings');
$_mzHelper->loadTool('product');*/

// START SWATCH FUNCTIONALITY
// Based on http://www.deepcodeonline.com/blog/magento/how-to-create-a-simple-color-thumbnailswatchselector-in-magento/

// Function declaration
if (!function_exists("findColorImage")) {
    function findColorImage($value, $arr, $key, $type)
    {
        $found = '';
        if (array_key_exists($key, $arr) && count($arr[$key]) > 0) {
            for($i=0; $i<count($arr[$key]);$i++)
            {
                // If it matches the color listed in the attribute
                if(trim($value) == trim($arr[$key][$i]))
                {
                    // Return the image src
                    $found = $arr[$type][$i];
                }
            }
        }
        return $found;
    }
}

// Get all the media gallery images associated with this product
$_backendModel = $_product->getResource()->getAttribute('media_gallery')->getBackend();
$_backendModel->afterLoad($_product);
$_gallery = $_product->getMediaGalleryImages();
// Count the images
$imgcount = count($_gallery);
// Global variables to compare the number of swatches and the number of colors
$_numberOfSwatches = 0;
$_numberOfColors = 0;

if ($imgcount > 0) {
    // Arrays to contain the swatches and the product images
    $swatches = array();
    $images = array();
    // Loop on the images
    foreach ($_gallery as $_image) {
        // If image has a label
        if ($this->htmlEscape($_image['label']) != "") {
            // Get the label text of the image
            $label = $this->htmlEscape($_image['label']);
            // Break the label into an array
            $arr_color = explode('_', $label);
            // Get the image identifier
            $identifier = $arr_color[0];
            // Get the color value, but don't assume the label = identifier_colour
            $color = "";
            if (count($arr_color) > 1) {
                $color = str_replace("-"," ",$arr_color[1]);
            }
            // If this is a color swatch
            if (preg_match("/swatch/", $identifier)) {
                // We increase the number of swatches
                $_numberOfSwatches++;
                // Let's store them into the array
                $swatches['color'][] = strval($color);
                // Swatch selector displayed resized in a 25pixels thumbnail
                $swatches['image'][] = strval($this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(30));
            }
            // Else if this is a front picture
            else if(preg_match("/front/", $identifier)) {
                // We generate the big zoomed picture
                $big = $this->helper('catalog/image')->init($_product, 'image',$_image->getFile())->__toString();
                // We retrieve the size dimensions based on the magiczoom settings
                $arr = @getimagesize($_image->getPath()) ? getimagesize($_image->getPath()) : array(380,570);
                list($w, $h) = Mage::helper('magiczoom/settings')->magicToolboxGetSizes('small_image', $arr);
                // And generate the product picture displayed
                $medium = $this->helper('catalog/image')->init($_product, 'small_image', $_image->getFile())->resize($w, $h)->__toString();
                // And store everything into our array
                $images['color'][] = strval($color);
                $images['image'][] = $medium;
                $images['big_image'][] = $big;
            }
        }
    }
}

// we no longer care if a product is out of stock
if (count($_attributes)):
//if ($_product->isSaleable() && count($_attributes)):
    ?>
    <div>
        <?php
        foreach($_attributes as $_attribute) {
            // We load the attribute
            $attributeLoaded = Mage::getModel('catalog/resource_eav_attribute')->load($_attribute->getAttributeId());
            // Retrieve the product attributes
            $attrs  = $_product->getTypeInstance(true)->getConfigurableAttributesAsArray($_product);
            // If this is a color attribute
            // [IF-COLOR]
            if (preg_match("/colou?r/i", $_attribute->getLabel()) ) {
                foreach($attrs as $attr) {
                    // If the attribute is found in the product attribute
                    // [IF-FOUND]
                    if(0 == strcmp($attributeLoaded->getAttributeCode(), $attr['attribute_code'])) {
                        // We count the number of colors found
                        $_numberOfColors = count($attr['values']);
                    } // [ELSE IF-FOUND]
                } /// End foreach

                // If the number of swatches is different than the number of colors (it shouldn't happen if the image validator is working properly)
                // [IF-COLOR-DIFF-SWATCHES]
                if($_numberOfColors != $_numberOfSwatches) {
                    // We display the dropdown instead of the swatches selector
                    ?>
                    <div class="hidden"><label class="text-lowercase"><?php echo $_attribute->getLabel() ?></label></div>
                    <div<?php if ($_attribute->decoratedIsLast){?> class="last"<?php }?>>
                        <div class="form-group">
                            <select onchange="colorSelectedDropdown(this,'<?php echo $this->getProduct()->getId() ?>')" name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" class="required-entry super-attribute-select form-control">
                                <option><?php if (Mage::helper('extendedcatalog')->replaceDefaultOptionText()): echo $_attribute->getLabel(); else: echo $this->__('Choose an Option...'); endif; ?></option>
                            </select>
                        </div>
                    </div>
                    <?php
                }
                else
                    // [ELSE-COLOR-EQ-SWATCHES]
                {
                    // Load the configurable attribute here which is the color
                    $attribute = $_product->getResource()->getAttribute($attributeLoaded->getAttributeCode());
                    $frontend = $attribute->getFrontend();
                    // Get the frontend labels and values of this attribute
                    $selectOptions = $frontend->getSelectOptions();
                    ?>
                    <div class="hidden"><label id="color-selector-label" class="text-lowercase"><?php echo $_attribute->getLabel() ?></label></div>
                    <?php // We set a hidden field here to store the value of the color being selected ?>
                    <input name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" type="hidden" value="" />
                    <?php // This div will contain the swatches ?>
                    <div id="swatch-container">
                        <?php
                        foreach($selectOptions as $refer_color_properties)
                        {
                            // If the value of the option is not empty
                            // [IF-VALUE]
                            if($refer_color_properties['value']!='')
                            {
                                // We retrieve the corresponding swatch
                                $color_image = findColorImage(strtolower($refer_color_properties['label']),$swatches,'color','image');
                                // If there was an swatch being returned
                                // [IF-SWATCH]
                                if($color_image != '')
                                {
                                    // Get the product base image for this color
                                    $product_image = findColorImage(strtolower($refer_color_properties['label']),$images,'color','image');
                                    // Get the product big zoomed image for this color
                                    $product_big_image = findColorImage(strtolower($refer_color_properties['label']),$images,'color','big_image');
                                    // Display the swatch div (the colorSelected JS function is declared in catalog/product/view.phtml)
                                    ?>
                                    <div class="image-swatch" id="<?php echo str_replace(" ","-",$refer_color_properties['label']); ?>" onclick="colorSelected('attribute<?php echo $_attribute->getAttributeId() ?>','<?php echo $refer_color_properties['value'];?>','<?php echo $product_image; ?>','<?php echo $product_big_image; ?>','<?php echo str_replace(" ","-",$refer_color_properties['label']);?>','<?php echo $this->getProduct()->getId(); ?>')">
                                        <?php
                                        // Display color swatch
                                        echo "<img width='30' height='30' src='".$color_image."' alt='".$refer_color_properties['label']."'/>";
                                        ?>
                                    </div>
                                    <?php
                                } // [END IF-SWATCH]
                            } // [END IF-VALUE]
                        } // End foreach
                        ?>
                    </div>
                    <?php
                } // [END IF-COLOR-DIFF-SWATCHES]
                // END SWATCH FUNCTIONALITY
            }
            // START SIZE FUNCTIONALITY
            else if(preg_match("/size/i", $_attribute->getLabel()) )
                // [ELSE-IF-SIZE]
                // Display the size
            {
                ?>
                <div class="hidden"><label id="size-selector-label" class="text-lowercase"><?php echo $_attribute->getLabel() ?></label></div>
                <?php // We set a hidden field here to store the value of the attribute being selected ?>
                <input name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" type="hidden" value="" />
                <?php // This is the div which will contain the sizes ?>
                <div id="size-container">
                    <?php
                    // Loop the attributes
                    foreach($attrs as $attr)
                    {
                        // If the attribute is found
                        // [IF-FOUND]
                        if(0 == strcmp($attributeLoaded->getAttributeCode(), $attr['attribute_code'])) {
                            // Get the values
                            $options = $attr['values'];
                            // Loop the values
                            foreach($options as $option) {
                                // Display size box
                                ?>
                                <div class="size-square text-center" id="<?php echo $option['label']; ?>" onclick="sizeSelected('attribute<?php echo $_attribute->getAttributeId() ?>','<?php echo $option['value_index'];?>','<?php echo $option['label'];?>')">
                                    <span class="center-block"><?php echo $option['label']; ?></span>
                                </div>
                                <?php
                            } // End foreach
                        } // [END IF-FOUND]
                    } // End foreach
                    ?>
                </div>
                <?php
            }
            else
                // [ELSE-NOT-COLOR-NOR-SIZE]
                // Display other attributes
            {
                ?>
                <div class="hidden"><label class="text-lowercase"><?php echo $_attribute->getLabel() ?></label></div>
                <div<?php if ($_attribute->decoratedIsLast){?> class="last"<?php }?>>
                    <div class="form-group">
                        <select name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" class="required-entry super-attribute-select form-control">
                            <option><option><?php if (Mage::helper('extendedcatalog')->replaceDefaultOptionText()): echo $_attribute->getLabel(); else: echo $this->__('Choose an Option...'); endif; ?></option></option>
                        </select>
                    </div>
                </div>
                <?php
            } // [END NOT-COLOR-NOR-SIZE]
        } // End foreach

        // END SIZE FUNCTIONALITY
        if ($_numberOfColors == $_numberOfSwatches) {
            echo '<script type="text/javascript">
jQuery(window).on('load', function(){
     jQuery("#swatch-container div").first().trigger("click");
});
</script>';
        }
        else {
            echo '<script type="text/javascript">
	jQuery(window).on('load', function(){
		jQuery(".super-attribute-select :nth-child(2)").prop("selected", true).trigger("change");
	});
	</script>';
        }
        ?>
    </div>
    <script type="text/javascript">
        var spConfigAcp = new Product.ACPconfigurable(<?php echo $this->getJsonConfig() ?>);
    </script>
    <?php
endif;
?>
