<?php
	$originalStore = Mage::app()->getStore();
  $indexURL = Mage::helper("adminhtml")->getUrl('*/*/index');
  $saveURL = Mage::helper("adminhtml")->getUrl('*/*/save');
  Mage::app()->setCurrentStore('default');
  $products = $this->getData('products');
	$cat_id = $this->getData('cat_id');
	$_category = Mage::getModel('catalog/category')->load($cat_id);
?>

<div class="content-header">
    <table cellspacing="0" class="grid-header">
        <tr>
            <td><h3><?=$this->__('Merchandise ').$_category->getName()?></h3></td>
            <td class="a-right">
               <button onclick="window.location='<?=$indexURL?>'" class="scalable back" type="button"><span>Back to Category List</span></button>
               <button onclick="showOutOfStock()" class="scalable show-out-of-stock" type="button" id="show-out-of-stock"  style="display:none;"><span>Show Out-of-stock Products</span></button>
               <button onclick="hideOutOfStock()" class="scalable hide-out-of-stock" type="button" id="hide-out-of-stock"><span>Hide Out-of-stock Products</span></button>
               <button onclick="showDisable()" class="scalable show-disable" type="button" id="show-disable"><span>Show Disabled Products</span></button>
               <button onclick="hideDisable()" class="scalable hide-disable" type="button" id="hide-disable"  style="display:none;"><span>Hide Disabled Products</span></button>
               <button onclick="submitMerchandising()" class="scalable save" type="button"><span>Finish Merchandising</span></button>
               
            </td>
        </tr>
    </table>
</div>

 <ul class="sortable">
 <?php
 	$simple_products = array();
  $nonexist_products = array();
 	foreach($products as $product){
 		$_product = Mage::getModel('catalog/product')->load($product["product_id"]);
    if (!$_product->getName()){
        $nonexist_products[] = $product["product_id"];
        continue;
    } 
 		if (($_product->getTypeID() != 'simple') || (($_product->getTypeID() == 'simple') && ( $_product->getVisibility() != 1 ))) {
 			$price = $_product->getPrice();
 			$fPrice = $_product->getFinalPrice();
?>
		<li class="isotopey <?=($_product->getStatus() == 2) ? "disable" : "enable"?> <?=($_product->isSalable()) ? "in-stock" : "out-of-stock"?>" id="<?=$product["product_id"]?>">
			<img src="<?=Mage::helper('catalog/image')->init($_product, 'image')->resize(150)?>" />
			<div class="prod_name"><?=$_product->getName()?></div>
			<div class="prod_sku"><?=$_product->getSku()?></div>
			<?php if ($price == $fPrice){?>
				<div class="prod_price"><?=number_format((float)$price, 2, '.', '')?></div>
			<?php }else{ ?>
				<div class="prod_price"><span style="text-decoration: line-through"><?=number_format((float)$price, 2, '.', '')?></span> <span style="color:red"><?=number_format((float)$fPrice, 2, '.', '')?></span></div>
			<?php } ?>
		</li>
<?
		}else{
			$simple_products[] = array(
					'id' => $product["product_id"],
					'name' => $_product->getName()
				);
		}
 	}
 ?>
</ul>
</div>
<form id="pos_form" action="<?=$saveURL?>" method="POST">
    <input type="hidden" name="prod" id="prod_data" />
    <input type="hidden" name="cat_id" value="<?=$this->getData('cat_id')?>" />  
    <input type="hidden" name="invalid_ids" value='<?=serialize($nonexist_products)?>' />
    <input name="form_key" type="hidden" value="<?php echo Mage::getSingleton('core/session')->getFormKey() ?>" />
</form>
<div>
Warning for developers: <p/>
	<textarea rows="5" cols="100">
<?=count($simple_products)?> simples products which are not visible individually are found in this category
<?php
	foreach($simple_products as $simple_product){
?>
<?=$simple_product["id"].", ".$simple_product["name"]?>

<?php		
	}
?>	

<?=count($nonexist_products)?> not-exist-anymore products in this category
<?php
  foreach($nonexist_products as $nonexist_product){
?>
<?=$nonexist_product?>

<?php   
  }?></textarea>
</div>	
<style>
ul.sortable {
  width: 100%;
  margin: 10px;
}
ul.sortable li {
  width: 175px;
  height: 230px;
  margin: 5px; 
  padding-top: 10px;
  color: black;
  box-sizing: border-box;
  text-align: center;
  border: 1px solid gray;
  transition-property: transform, top, left;}
ul.sortable li.disable{
	opacity:0.2;
}
ul.sortable li.out-of-stock{
  color: #A7A7A7;
  text-decoration: line-through;
}

ul.sortable li.ui-sortable-placeholder {
    visibility: visible!important;
    background: #aaa;
    /*box-shadow: inset 0 0 100px #6c6c6c;*/}
ul.sortable li.ui-sortable-placeholder.active {
      /*box-shadow: inset 0 0 200px #6c6c6c;   */             
    }
ul.sortable li.ui-sortable-placeholder.active.starting {
      transition-property: none;
    }
  

/**** Isotope Filtering ****/

.isotope-item {
  z-index: 2;
}

.isotope-hidden.isotope-item {
  pointer-events: none;
  z-index: 1;
}
</style>
<script>
jQuery(document).ready(function(){
  if (jQuery('.disable').length == 0){
    jQuery('.show-disable').hide();
  }
  if ((jQuery('.out-of-stock').length == 0) || (jQuery('.out-of-stock').length == jQuery('.disable').length)){
    jQuery('.hide-out-of-stock').hide();
  }
});

function submitMerchandising(){
    jQuery('#pos_form #prod_data').attr('value',jQuery('ul.sortable').sortable('toArray'));
    jQuery('#pos_form').submit();
}

function hideOutOfStock(){ 
  jQuery('ul.sortable').isotope({ filter: '.enable.in-stock' });
  jQuery('.hide-out-of-stock').hide();
  jQuery('.show-out-of-stock').show();
}

function showOutOfStock(){ 
  jQuery('ul.sortable').isotope({ filter: '.enable' });
  jQuery('.hide-out-of-stock').show();
  jQuery('.show-out-of-stock').hide();
}

function hideDisable(){	
	jQuery('ul.sortable').isotope({ filter: '.enable' });
  jQuery('.hide-disable').hide();
  jQuery('.show-disable').show();
}

function showDisable(){
	jQuery('ul.sortable').isotope({ filter: '*' });
  jQuery('.hide-disable').show();
  jQuery('.show-disable').hide();
}

var list = jQuery('ul.sortable');
list.isotope({  
  transformsEnabled: false,
  filter: '.enable',
  transitionDuration: 0
  , itemSelector: '.isotopey'
  , onLayout: function() {
    list.css('overflow', 'visible');
  }  
});
list.sortable({
  cursor: 'move'
  //, tolerance: 'intersection'  //'pointer' is too janky
  , start: function(event, ui) {                        
    //add grabbing and moving classes as user has begun
    //REMOVE isotopey so that isotope does not try to sort our item,
    //resulting in the item moving around and flickering on 'change'
    ui.item.addClass('grabbing moving').removeClass('isotopey');
    
    ui.placeholder
      .addClass('starting') //adding the 'starting' class removes the transitions from the placeholder.
      //remove 'moving' class because if the user clicks on a tile they just moved,
      //the placeholder will have 'moving' class and it will mess with the transitions
      .removeClass('moving')
      //put placeholder directly below tile. 'starting' class ensures the
      //placeholder simply appears and does not 'fly' into place
      .css({
        top: ui.originalPosition.top
        , left: ui.originalPosition.left
      })
      ;
    //reload the items in their current state to override any previous
    //sorting and to include placeholder, but do NOT call a re-layout
    list.isotope('reloadItems');                    
  }                
  , change: function(event, ui) {
    //change only fires when the DOM is changed. the DOM changes when 
    //the placeholder moves up or down in the document order 
    //within the sortable container
    
    //remove 'starting' class so that placeholder can now move smoothly
    //with the interface
    ui.placeholder.removeClass('starting');
    //reload items to include the placeholder's new position in the DOM. 
    //then when you sort, everything around the placeholder moves as 
    //though the item were moving it.
    list
      .isotope('reloadItems')
      .isotope({ sortBy: 'original-order'})      
    ;
  }
  , beforeStop: function(event, ui) {
    //in this event, you still have access to the placeholder. this means
    //you know exactly where in the DOM you're going to place your element.
    //place it right next to the placeholder. jQuery UI Sortable removes the
    //placeholder for you after this event, and actually if you try to remove
    //it in this step it will throw an error.
    ui.placeholder.after(ui.item);                    
  }
  , stop: function(event, ui) {      
    //user has chosen their location! remove the 'grabbing' class, but don't
    //kill the 'moving' class right away. because the 'moving' class is 
    //preventing your item from having transitions, you should keep it on
    //until isotope is done moving everything around. it will "snap" into place
    //right where your placeholder was.
    
    //also, you must add the 'isotopey' class back to the box so that isotope
    //will again include your item in its sorting list
    ui.item.removeClass('grabbing').addClass('isotopey');    
    //reload the items again so that your item is included in the DOM order
    //for isotope to do its final sort, which actually won't move anything
    //but ensure that your item is in the right place
    list
      .isotope('reloadItems')
      .isotope({ sortBy: 'original-order' }, function(){
        //finally, after sorting is done, take the 'moving' class off.
        //doing it here ensures that your item "snaps" and isn't resorted
        //from its original position. since this happens on callback,
        //if the user grabbed the tile again before callback is fired,
        //don't remove the moving class in mid-grab
        
        //for some reason in this code pen, the callback isn't firing predictably
        console.log(ui.item.is('.grabbing')); 
        if (!ui.item.is('.grabbing')) {
          ui.item.removeClass('moving');                        
        }
      });
  }
});

</script>

<?php
  Mage::app()->setCurrentStore($originalStore->getId()); 
?>