<?php

/**
 * Class FactoryX_CouponValidation_Adminhtml_CouponvalidationController
 */
class FactoryX_CouponValidation_Adminhtml_CouponvalidationController extends Mage_Adminhtml_Controller_Action
{
    /**
     * Check for is allowed
     *
     * @return boolean
     */
    protected function _isAllowed()
    {
        return Mage::getSingleton('admin/session')->isAllowed('promo/validation');
    }

    /**
     * Form display action
     */
    public function indexAction()
    {
        $this->loadLayout();
        $this->_setActiveMenu('promo/validation');

        $this->_addContent($this->getLayout()->createBlock('couponvalidation/adminhtml_couponvalidation_validation'));

        $this->renderLayout();
    }

    public function validateAction()
    {
        $data = $this->getRequest()->getParams();
        if ($data && array_key_exists('code',$data)) {
            try {
                // Get possible associated newsletter subscriber
                $collection = Mage::getResourceModel('newsletter/subscriber_collection')
                    ->addFieldToFilter('subscriber_coupon',$data['code']);

                // Load the coupon to get the rule_id
                $coupon = Mage::getResourceModel('salesrule/coupon_collection')
                    ->addFieldToSelect('rule_id')
                    ->addFieldToFilter('code',$data['code'])
                    ->setPageSize(1);

                // Load the rule to get the description
                $rule = Mage::getResourceModel('salesrule/rule_collection')
                    ->addFieldToSelect('description')
                    ->addFieldToFilter('rule_id',$coupon->getFirstItem()->getRuleId())
                    ->setPageSize(1);

                // Look for an email address in the description
                $ruleDesc = $rule->getFirstItem()->getDescription();
                $matches = [];
                if (preg_match('/[a-z\d._%+-]+@[a-z\d.-]+\.[a-z]{2,4}\b/i',$ruleDesc,$matches)) {
                    $email = $matches[0];
                } else {
                    $email = false;
                }

                $params = [];

                if (Mage::getModel('couponvalidation/validator')->validate($data)) {
                    Mage::getSingleton('adminhtml/session')->addSuccess(Mage::helper('couponvalidation')->__('Coupon %s is valid',$data['code']));

                    // Add the subscriber ID
                    if ($collection->getSize()) {
                        $subscriber = $collection->getFirstItem()->getSubscriberId();
                        $params['subscriber'] = $subscriber;
                    }

                    // Add the customer email
                    if ($email) {
                        $params['customer'] = $email;
                    }

                    $this->_redirect('*/*/',$params);
                }

            } catch (Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError($e->getMessage());

                // Add the subscriber ID
                if ($collection->getSize()) {
                    $subscriber = $collection->getFirstItem()->getSubscriberId();
                    $params['subscriber'] = $subscriber;
                }

                // Add the customer email
                if ($email) {
                    $params['customer'] = $email;
                }

                $this->_redirect('*/*/',$params);
            }
        }
    }

    public function redeemAction()
    {
        $data = $this->getRequest()->getParams();
        if ($data && array_key_exists('code',$data)) {
            try {
                $coupon = Mage::getModel('salesrule/coupon')->load($data['code'],'code');

                // Validate coupon existence
                if (!$coupon->getId()) {
                    Mage::throwException(Mage::helper('couponvalidation')->__('Coupon %s does not exist',$data['code']));
                }

                $rule = Mage::getModel('salesrule/rule')->load($coupon->getRuleId());

                // If autogenerated coupon, delete
                if ($rule->getUseAutoGeneration()) {
                    $coupon->delete();
                    $comment = Mage::helper('couponvalidation')->__('Autogenerated coupon %s has been deleted',$data['code']);
                    Mage::getSingleton('adminhtml/session')->addSuccess($comment);
                } else {
                    // If normal coupon, disable the rule
                    $rule->setIsActive(0);
                    $rule->save();
                    $comment = Mage::helper('couponvalidation')->__('Rule of coupon %s is now inactive',$data['code']);
                    Mage::getSingleton('adminhtml/session')->addSuccess($comment);
                }

                Mage::dispatchEvent('factoryx_couponvalidation_redeem',['rule' => $rule, 'coupon' => $data['code'], 'comment' => $comment, 'user' => Mage::getSingleton('admin/session')->getUser()->getUsername()]);

                $this->_redirect('*/*/');

            } catch (Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError($e->getMessage());
                $this->_redirect('*/*/');
            }
        }
    }

    protected function _initAction()
    {
        $this->loadLayout()
            ->_setActiveMenu('promo/validation');

        return $this;
    }

    public function gridAction()
    {
        $this->_initAction();
        $this->_addContent($this->getLayout()->createBlock('couponvalidation/adminhtml_logs'));
        $this->renderLayout();
    }

    public function massDeleteAction()
    {
        $logIds = $this->getRequest()->getParam('logs');
        if (!is_array($logIds)) {
            Mage::getSingleton('adminhtml/session')->addError(Mage::helper('couponvalidation')->__('Please select log(s)'));
        } else {
            try {
                foreach ($logIds as $logId) {
                    $model = Mage::getModel('couponvalidation/log')->load($logId);
                    $model->delete();
                }
                Mage::getSingleton('adminhtml/session')->addSuccess(
                    Mage::helper('adminhtml')->__(
                        'Total of %d record(s) were successfully deleted', count($logIds)
                    )
                );
            } catch (Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError($e->getMessage());
            }
        }
        $this->_redirect('*/*/grid');
    }
}